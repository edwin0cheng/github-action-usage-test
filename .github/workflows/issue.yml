on: 
  issue_comment:
    types: [created]

jobs:
  check_basic_valid:
    name: Check Issue Comment Sha  
    runs-on: ubuntu-latest
    steps:
      - name: Show Issue Comment
        run: echo "${{ github.event.comment.body }}"
      - uses: actions/setup-python@v1
        with:
          python-version: "^3.5.0" # Version range or exact version of a Python version to use, using semvers version range syntax.
          architecture: "x64"
      - uses: actions/checkout@v1
        with:
          ref: master
      - name: Check Contains raa+
        id: contain_ra
        run: |
          touch error.txt
          python ci/issue.py check "${{ github.event.comment.body }}" error.txt
          echo ::set-output name=msg::$(cat error.txt)
      - name: Checkout gh-pages
        if: steps.contain_ra.outputs.msg == ''
        run: |
          mkdir gh-pages
          cd gh-pages
          git clone --branch gh-pages https://github.com/${GITHUB_REPOSITORY} .
      - name: More Check
        if: steps.contain_ra.outputs.msg == ''
        run: |
          cd gh-pages
          python ../ci/issue.py exists ../target_sha.txt ../error.txt
          cd ..
          mkdir rust-analyzer
          cd rust-analyzer
          git clone https://github.com/rust-analyzer/rust-analyzer.git .
          python ../ci/issue.py valid ../target_sha.txt ../error.txt
      - name: Read Error
        id: read_error
        run: |
          echo ::set-output name=msg::$(cat error.txt)
      - name: Tell failure story
        if: steps.read_error.outputs.msg != 'NO_MSG' && steps.read_error.outputs.msg != ''
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require("fs")
            const msg = fs.readFileSync("./error.txt", "utf8")
            github.issues.createComment({...context.issue, body: 'ðŸ‘€ ' + msg})
      - uses: actions/github-script@0.3.0
        if: steps.read_error.outputs.msg == ''
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require("fs")
            fs.writeFileSync("./issue.json", JSON.stringify(context.issue))
            github.issues.createComment({...context.issue, body: 'ðŸ¤– Your request is queued, Thanks!'})
      - name: Send Deployment
        if: steps.read_error.outputs.msg == ''
        env: 
          TOKEN: ${{ secrets.ISSUE_TOKEN }}
        run: |
          python ./ci/send_deployment.py


          
