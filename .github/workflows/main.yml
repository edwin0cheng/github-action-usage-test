on: ["deployment"]

jobs:
  build_ra:
    runs-on: ubuntu-latest
    name: Build RA and Run Stats
    steps:
      - uses: actions/setup-python@v1
        with:
          python-version: "^3.5.0" # Version range or exact version of a Python version to use, using semvers version range syntax.
          architecture: "x64"

      - name: Show Request sha
        run: |
          echo ${{ github.event.deployment.payload }}

      - name: 'Deployment pending'
        uses: 'deliverybot/status@master'
        with:
          state: 'pending'
          token: '${{ secrets.GITHUB_TOKEN }}'
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, rust-src

      - uses: actions/checkout@v1
        with:
          submodules: true
          ref: refs/heads/master

      - name: Checkout RA
        env:
          JSON: ${{ github.event.deployment.payload }}
        run: |
          mkdir rust-analyzer
          cd rust-analyzer
          git clone https://github.com/rust-analyzer/rust-analyzer.git .
          git checkout $(python ../ci/jq.py sha)

      - name: Cargo target cache
        uses: actions/cache@v1
        with:
          path: rust-analyzer/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-analyzer/**/Cargo.lock') }}
      - name: Generate artifact
        run: |
          mkdir ra_cli
          cd rust-analyzer          
          echo $(git rev-parse --short HEAD) > ../ra_cli/commit
          echo $(git show --no-patch --no-notes --pretty=%ct HEAD) > ../ra_cli/commit_time
      - name: Run Cargo on RA
        run: |
          cd rust-analyzer
          cargo build --release -p ra_cli
          cp ./target/release/ra_cli ../ra_cli/ra_cli
      - name: Run analysis-stats
        run: |
          ls -R ./ra_cli
          chmod -R a+rx ./ra_cli
          chmod a+rx ./ci/run_stats.sh
          chmod -R u+rw ./rustc-perf
          ./ci/run_stats.sh
      - name: Prepare gh-pages
        run: |
          mkdir gh-pages          
          cd gh-pages
          git clone --branch gh-pages https://github.com/${GITHUB_REPOSITORY} .
          git config --local user.email "action@github.com"
          git config --local user.name "Bot For Stats"
          mkdir -p data
          python ../ci/convert.py ../ra-stats-output.txt ./data/commits.json ./data
          cat ./data/commits.json
          cat ../ra_cli/commit
          git add .
          git commit -m "[Bot] Add output $(cat ../ra_cli/commit)"
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          directory: gh-pages
      - name: "deployment success"
        if: success()
        uses: "deliverybot/status@master"
        with:
          state: "success"
          token: "${{ secrets.GITHUB_TOKEN }}"
      - name: "deployment failure"
        if: failure()
        uses: "deliverybot/status@master"
        with:
          state: "failure"
          token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Request Rebuild Page
        env:
          TOKEN: ${{ secrets.ISSUE_TOKEN }}
        run: |
          chmod a+rx ./ci/rebuild_page.sh
          ./ci/rebuild_page.sh
      - uses: actions/github-script@0.3.0
        env:
          PAYLOAD: ${{ github.event.deployment.payload }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const process = require("process")
            const playload_json = JSON.parse(process.env.PAYLOAD)
            if(playload_json.issue){
              const issue_object = playload_json.issue
              github.issues.createComment({...issue_object, body: 'ðŸ¤– Your request commit is posted!'})
            }
            