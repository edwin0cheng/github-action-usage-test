{"version":3,"sources":["Chart.tsx","MainUnit.tsx","commitStats.ts","App.tsx","theme.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","container","background","Chart","props","classes","commits","history","reverse","Fragment","className","data","margin","top","right","bottom","left","dataKey","interval","tickFormatter","angle","dy","dx","height","unit","position","style","textAnchor","type","stroke","dot","root","width","overflowX","paper","paddingBottom","table","minWidth","Benchmarks","tablecell","detail","paddingLeft","paddingRight","React","useState","commit","setCommit","useEffect","a","stat","fetch","commitStat","fetchData","sha","shortName","str","base","substring","length","lastIndexOf","percent","n","toFixed","row","kind","content_rows","percent_expr","expressions","tab","push","TableCell","align","key","declarations","functions","unknown_types","partial_unknown_types","type_mismatches","Math","floor","database_loaded_time","milliseconds","item_collection_time","inferenece_time","total_time","TableRow","project_name","component","scope","roots","crates","modules","nCol","colSpan","msg","total_expresions","totalExpressions","total_unknown","totalPartial","totalUnknown","headers","formattedTime","DateTime","fromSeconds","timestamp","toLocaleString","DATETIME_SHORT_WITH_SECONDS","refID","commit_sha","Container","Box","display","p","flexGrow","id","href","FormControl","RadioGroup","aria-label","name","value","onChange","event","setTab","target","FormControlLabel","control","Radio","color","label","labelPlacement","Table","size","TableHead","TableBody","rows","stats","MainUnit","setValue","handleTabChange","newValue","map","Paper","parseTime","s","endsWith","parseFloat","CommitHistory","nCommits","cb","this","sort","b","CommitResult","ROOT_PATH","res","json","error","Duration","fromMillis","result","errorRate","add","total_expressions","total_partial","exprs","totalError","wholeHistory","fetchCommits","start","entries","Object","shaList","parseInt","totalCount","slice","setCommitCount","paddingTop","spacing","Graph","setHistory","h","subscribe","createMuiTheme","palette","primary","main","secondary","red","A400","default","ReactDOM","render","ThemeProvider","CssBaseline","startIndex","setStartIndex","setCommits","numPages","setNumPages","page","setPage","count","ceil","maxWidth","my","Typography","variant","gutterBottom","Pagination","shape","document","querySelector"],"mappings":"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","file":"static/js/main.c0e8d0e1.chunk.js","sourcesContent":["import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\nimport { CommitHistory } from './commitStats';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n      background: \"#eee\",\n    },\n  }))\n\ninterface ChartProps {\n    history: CommitHistory\n}\n\nexport default function Chart(props: ChartProps) {\n    const classes = useStyles();\n    const commits = [...props.history.commits];\n    commits.reverse();\n\n    const tickFormatter = (data:string) : string => {\n        return data;\n    }\n\n    return (\n        <React.Fragment>\n            <ResponsiveContainer className={classes.container}>\n                <LineChart\n                    data={commits}\n                    margin={{\n                        top: 16,\n                        right: 16,\n                        bottom: 0,\n                        left: 24,\n                    }}\n                >\n                    <XAxis dataKey=\"commit_sha\" interval={0} tickFormatter={tickFormatter}  angle={90} dy={33} dx={7} height={100}/>\n                    <YAxis  unit=\"%\">\n                        <Label angle={270} position=\"left\" style={{ textAnchor: 'middle' }}>\n                            Unknown + Partial\n                        </Label>\n                    </YAxis>\n                    {/* <Bar dataKey=\"totalUnknown\" fill=\"#8884d8\" /> */}\n                    <Line type=\"monotone\" dataKey=\"errorRate\" stroke=\"#556CD6\" dot={false} />\n                </LineChart>\n            </ResponsiveContainer>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Container, Box, FormControl, RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\nimport {CommitStat, StatsOrError, CommitResult} from './commitStats';\nimport {DateTime} from 'luxon';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    paper: {\n        paddingBottom: '100px',\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\ninterface BenchmarksProps {\n    stat: CommitResult,\n    setTab: (tab: string) => void,\n    tab: string,\n}\n\nfunction Benchmarks(props: BenchmarksProps) {\n    const classes = makeStyles({\n        tablecell: {\n            // fontSize: '0.8em'\n        },\n        detail: {\n            paddingLeft: '1em',\n            paddingRight: '1em'\n        }\n    })()\n\n    const [commit, setCommit] = React.useState(\n        null as CommitStat | null\n    );\n\n    React.useEffect(() => {\n        async function fetchData() {\n            const commitStat = await props.stat.fetch();\n            setCommit(commitStat);            \n        }\n        fetchData()\n    }, [props.stat])\n\n    if (commit === null) {\n        return <div>\n            <p> Loading ... {props.stat.sha} </p>\n        </div>;\n    }\n\n    const shortName = function (str: string): string {\n        var base = str.substring(0, str.length - 1)\n        base = base.substring(base.lastIndexOf('/') + 1, str.length);\n\n        return base;\n    }\n\n    const percent = function(n: number, base: number): string {\n        if (base === 0) return \"0%\";\n\n            const p = (n / base) * 100.0\n            return `${p.toFixed(2)}%`\n    }\n\n    const row = function (stat: StatsOrError) {       \n        switch(stat.kind) {\n            case \"stats\": {\n                let content_rows = [];\n                const percent_expr = function (n: number): string {\n                    return percent(n, stat.expressions)\n                }    \n                \n                if (props.tab === \"0\") {\n                    content_rows.push(<TableCell className={classes.tablecell} align=\"right\" key=\"c0\">{stat.declarations}</TableCell>);\n                    content_rows.push(<TableCell className={classes.tablecell} align=\"right\" key=\"c1\">{stat.functions}</TableCell>);\n                    content_rows.push(<TableCell className={classes.tablecell} align=\"right\" key=\"c2\">{stat.expressions}</TableCell>);\n                    content_rows.push(<TableCell className={classes.tablecell} align=\"right\" key=\"c3\">{stat.unknown_types} ({percent_expr(stat.unknown_types)})</TableCell>);\n                    content_rows.push(<TableCell className={classes.tablecell} align=\"right\" key=\"c4\">{stat.partial_unknown_types} ({percent_expr(stat.partial_unknown_types)})</TableCell>);\n                    content_rows.push(<TableCell className={classes.tablecell} align=\"right\" key=\"c5\">{stat.type_mismatches}</TableCell>);\n                } else { \n                    content_rows.push(<TableCell className={classes.tablecell} align=\"right\" key=\"c6\">{Math.floor(stat.database_loaded_time.milliseconds)}</TableCell>);\n                    content_rows.push(<TableCell className={classes.tablecell} align=\"right\" key=\"c7\">{Math.floor(stat.item_collection_time.milliseconds)}</TableCell>);\n                    content_rows.push(<TableCell className={classes.tablecell} align=\"right\" key=\"c8\">{Math.floor(stat.inferenece_time.milliseconds)}</TableCell>);\n                    content_rows.push(<TableCell className={classes.tablecell} align=\"right\" key=\"c9\">{Math.floor(stat.total_time.milliseconds)}</TableCell>);\n                }\n\n                return (<TableRow key={stat.project_name}>\n                    <TableCell className={classes.tablecell} component=\"th\" scope=\"row\">{shortName(stat.project_name)}</TableCell>\n                    <TableCell className={classes.tablecell} align=\"right\">{stat.roots}</TableCell>\n                    <TableCell className={classes.tablecell} align=\"right\">{stat.crates} [{stat.modules}]</TableCell>\n                    {content_rows}\n                </TableRow>)        \n            }\n            case \"error\": {\n                let nCol = 8;\n                if (props.tab === \"1\") {\n                    nCol = 6\n                }\n\n                return (<TableRow key={stat.project_name}>\n                    <TableCell className={classes.tablecell} component=\"th\" scope=\"row\">{shortName(stat.project_name)}</TableCell>\n                    <TableCell className={classes.tablecell} align=\"right\" colSpan={nCol}>{stat.msg}</TableCell>\n                </TableRow>)\n            }\n        }\n    }\n\n    const rows = function () {\n        let rows = [];\n        for (let stat of commit.stats) {\n            rows.push(row(stat))\n        }\n        return rows;\n    }\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        props.setTab(event.target.value);\n    };\n\n    let total_expresions = commit.totalExpressions\n    let total_unknown = commit.totalPartial + commit.totalUnknown;\n\n    let headers = []\n    if (props.tab === \"0\") {\n        headers.push(<TableCell className={classes.tablecell} align=\"right\" key=\"0\">Decl</TableCell>);\n        headers.push(<TableCell className={classes.tablecell} align=\"right\" key=\"1\">Func</TableCell>);\n        headers.push(<TableCell className={classes.tablecell} align=\"right\" key=\"2\">Expr</TableCell>);\n        headers.push(<TableCell className={classes.tablecell} align=\"right\" key=\"3\">Unknown</TableCell>);\n        headers.push(<TableCell className={classes.tablecell} align=\"right\" key=\"4\">Partial</TableCell>);\n        headers.push(<TableCell className={classes.tablecell} align=\"right\" key=\"5\">Mismatches</TableCell>);\n    } else {\n        headers.push(<TableCell className={classes.tablecell} align=\"right\" key=\"6\">Database Loaded(ms)</TableCell>);\n        headers.push(<TableCell className={classes.tablecell} align=\"right\" key=\"7\">Items(ms)</TableCell>);\n        headers.push(<TableCell className={classes.tablecell} align=\"right\" key=\"8\">Inference(ms)</TableCell>);\n        headers.push(<TableCell className={classes.tablecell} align=\"right\" key=\"9\">Total(ms)</TableCell>);\n    }\n        \n    const time = DateTime.fromSeconds(commit.timestamp);\n    const formattedTime = time.toLocaleString(DateTime.DATETIME_SHORT_WITH_SECONDS);\n    const refID = commit.commit_sha;\n\n    return (        \n        <Container key={commit.commit_sha}>\n            <Box display=\"flex\" p={1}>\n                <Box flexGrow={1}>\n                    <p id={refID}><a href={\"https://github.com/rust-analyzer/rust-analyzer/commit/\" + commit.commit_sha}>{\"@\" + commit.commit_sha}</a></p>\n                    <Box display=\"flex\">\n                        <Box className={classes.detail}><small>Commit Time: {formattedTime}</small></Box>\n                        <Box className={classes.detail}><small>Total Expression: {total_expresions}</small></Box> \n                        <Box className={classes.detail}><small>Total Unknown + Partial: {total_unknown} ({percent(total_unknown, total_expresions)})</small></Box> \n                    </Box>\n                </Box>\n                <Box>\n                    <FormControl component=\"fieldset\">\n                        <RadioGroup aria-label=\"position\" name=\"position\" value={props.tab} onChange={handleChange} row>\n                            <FormControlLabel\n                                value=\"0\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"Syntax\"\n                                labelPlacement=\"end\"\n                            />\n                            <FormControlLabel\n                                value=\"1\"\n                                control={<Radio color=\"primary\" />}\n                                label=\"Time(ms)\"\n                                labelPlacement=\"end\"\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Box>\n            </Box>\n\n            <Table size=\"small\" aria-label=\"Benchmarks table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell className={classes.tablecell}>Project Name</TableCell>\n                        <TableCell className={classes.tablecell} align=\"right\">Roots</TableCell>\n                        <TableCell className={classes.tablecell} align=\"right\">Crates [Modules]</TableCell>\n                        {headers}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {rows()}\n                </TableBody>\n            </Table>\n        </Container>\n\n    )\n}\n\ninterface MainUnitProps {\n    stats: Array<CommitResult>\n}\n\nexport default function MainUnit(props: MainUnitProps) {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(\"0\");\n\n    const handleTabChange = (newValue: string): void => {\n        setValue(newValue);\n    };\n\n    if (props.stats.length === 0) {\n        return (\n            <div className={classes.root}>\n                <p> Loading ...</p>\n            </div>\n        )\n    }\n\n    return (\n        <div className={classes.root}>\n            {props.stats.map((stat) =>\n                <Paper className={classes.paper} key={stat.sha}>\n                    <Benchmarks stat={stat} setTab={handleTabChange} tab={value} />\n                </Paper>\n            )}\n        </div>\n    );\n}","import { Duration } from 'luxon';\n\nlet ROOT_PATH = \".\";\nif (process.env.NODE_ENV !== 'production') {\n    ROOT_PATH = 'https://edwin0cheng.github.io/github-action-usage-test/';\n}\n\nexport const PAGE_COMMITS_COUNT = 50;\n\nexport interface CommitStat {\n    timestamp: number,\n    commit_sha: string,\n    stats: StatsOrError[],\n\n    totalExpressions: number,\n    totalUnknown: number,\n    totalPartial: number,\n    errorRate: number,\n}\n\nexport interface Error {\n    kind: \"error\",\n    project_name: string,\n    msg: string,\n}\n\nexport interface Stats {\n    kind: \"stats\",\n    database_loaded_time: Duration,\n    declarations: number,\n    expressions: number,\n    functions: number,\n    inferenece_time: Duration,\n    item_collection_time: Duration,\n    crates: number,\n    modules: number,\n    partial_unknown_types: number,\n    project_name: string,\n    roots: number,\n    total_time: Duration,\n    type_mismatches: number,\n    unknown_types: number,\n}\n\nexport type StatsOrError = Stats | Error;\n\nconst parseTime = function (s: string): number {\n    if (s.endsWith(\"ms\")) {\n        return parseFloat(s.substring(0, s.length - 2))\n    }\n    return parseFloat(s.substring(0, s.length - 1)) * 1000\n}\n\ntype HistoryCallback = (arg: CommitHistory | [number,number]) => void;\n\nexport class CommitHistory {\n    commits: Array<CommitStat> = [];\n    nCommits: number | null = null;\n    cb: HistoryCallback | null = null;\n\n    subscribe(cb: HistoryCallback) {\n        this.cb = cb;\n    }\n\n    setCommitCount(n: number) {\n        this.nCommits = n;\n        this.commits = [];        \n    }\n\n    add(stat: CommitStat) {\n        this.commits.push(stat);\n        this.commits.sort((a, b) => {\n            return b.timestamp - a.timestamp;\n        });\n\n        if(this.nCommits === null || this.cb === null) {\n            return;\n        }\n\n        if (this.commits.length < this.nCommits) {            \n            this.cb([this.commits.length, this.nCommits]);  \n            return;\n        }\n\n        this.cb(this);\n    }\n}\n\nexport class CommitResult {\n    constructor(readonly sha: string, readonly timestamp: number, private history: CommitHistory) {\n    }\n\n    async fetch(): Promise<CommitStat> {\n        const res = await fetch(ROOT_PATH + '/data/' + this.sha + '.json')\n        const json = await res.json()\n        let stats = json.map((s: any) => {\n            if (s.error) {\n                s.kind = \"error\";\n                s.msg = s.error;\n            } else {\n                s.kind = \"stats\";\n                s.database_loaded_time = Duration.fromMillis(parseTime(s.database_loaded_time))\n                s.inferenece_time = Duration.fromMillis(parseTime(s.inferenece_time))\n                s.item_collection_time = Duration.fromMillis(parseTime(s.item_collection_time))\n                s.total_time = Duration.fromMillis(parseTime(s.total_time))\n            }\n            return s\n        });\n\n        let result = {\n            timestamp: this.timestamp,\n            commit_sha: this.sha,\n            stats,\n            totalExpressions: totalExpressions(stats),\n            totalUnknown: totalUnknown(stats),\n            totalPartial: totalPartial(stats),\n            errorRate: errorRate(stats),\n        };\n\n        this.history.add(result);\n\n        return result;\n    }\n}\n\nfunction totalExpressions(stats: StatsOrError[]): number {\n    let total_expressions = 0;\n    for (let stat of stats) {\n        if (stat.kind === \"stats\") {\n            total_expressions += stat.expressions;\n        }\n    }\n    return total_expressions;\n}\n\nfunction totalUnknown(stats: StatsOrError[]): number {\n    let total_unknown = 0;\n    for (let stat of stats) {\n        if (stat.kind === \"stats\") {\n            total_unknown += stat.unknown_types;\n        }\n    }\n    return total_unknown;\n}\n\nfunction totalPartial(stats: StatsOrError[]): number {\n    let total_partial = 0;\n    for (let stat of stats) {\n        if (stat.kind === \"stats\") {\n            total_partial += stat.partial_unknown_types;\n        }\n    }\n    return total_partial;\n}\n\nfunction errorRate(stats: StatsOrError[]): number {\n    let exprs = totalExpressions(stats)\n    let totalError = totalUnknown(stats) + totalPartial(stats)\n    if (totalError === 0) return 0;\n\n    return (totalError / exprs) * 100.0\n}\n\nlet wholeHistory: CommitHistory = new CommitHistory();\n\nexport const fetchCommits = async function (start: number): Promise<[number, CommitResult[]]> {\n    let commitsSource = ROOT_PATH + '/data/commits.json';\n\n    const res = await fetch(commitsSource);\n    const json = await res.json();\n    const entries = Object.entries(json.commits);\n\n    let shaList: Array<CommitResult> = entries.map(([key, value]) => {\n        return new CommitResult(key, parseInt(\"\" + value) as number, wholeHistory!);\n    });\n    shaList.sort((a, b) => {\n        return b.timestamp - a.timestamp;\n    });\n    const totalCount = shaList.length;\n    shaList = shaList.slice(start, start + PAGE_COMMITS_COUNT);\n    wholeHistory.setCommitCount(shaList.length);\n    \n\n    // if (window.location.hash) {\n    //     // Scroll to hash after 0.5 sec\n    //     setTimeout(() => {\n    //         console.log(window.location.hash)\n    //         document!.getElementById(window.location.hash.substr(1))!.scrollIntoView();\n    //     }, 0.5)\n    // }\n    return [totalCount, shaList];\n}\n\nexport function subscribeHistory(cb : HistoryCallback ) {\n    wholeHistory.subscribe(cb);\n}\n","import React, { useState, useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Pagination from '@material-ui/lab/Pagination';\nimport Chart from './Chart';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\nimport MainUnit from './MainUnit';\nimport { CommitResult, CommitHistory, fetchCommits, subscribeHistory, PAGE_COMMITS_COUNT } from './commitStats';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        height: '320px',\n    }\n}))\n\ninterface GraphProps {\n    commits: Array<CommitResult>\n}\n\nfunction Graph(props: GraphProps) {\n    const classes = useStyles();\n\n    const [history, setHistory] = useState(\n        [0, 0] as CommitHistory | [number, number],\n    );\n\n    useEffect(() => {\n        subscribeHistory((h: [number, number] | CommitHistory) => setHistory(h));\n    }, [props.commits]);\n\n    if (history instanceof CommitHistory) {\n        return (<Paper className={classes.paper}>\n            <Chart history={history as CommitHistory} />\n        </Paper>);\n    } else {\n        let [h, s] = history as [number, number];\n        return (<div><p>\n            Loading graph ... {h} / {s}\n        </p></div>);\n    }\n}\n\nexport default function App() {\n    const classes = useStyles();\n    const [startIndex, setStartIndex] = useState(\n        0 as number\n    );\n    const [commits, setCommits] = useState(\n        [] as Array<CommitResult>,\n    );\n    const [numPages, setNumPages] = useState(\n        1\n    );\n    const [page, setPage] = useState(\n        1\n    );\n\n    useEffect(() => {\n        async function fetchData() {\n            const [count, commits] = await fetchCommits(startIndex);\n            setCommits(commits);\n            let n = Math.ceil(count / PAGE_COMMITS_COUNT);\n            if( n === 0 ) {\n                n = 1;\n            }\n            setNumPages(n);\n        }\n        fetchData()\n    }, [startIndex]);\n\n    const handleChange = (event: any, value: any) => {\n        let p = value as number;\n        p = p - 1;        \n        setStartIndex(p * PAGE_COMMITS_COUNT);\n        setPage(value);\n    };\n\n    return (\n        <Container maxWidth=\"lg\">\n            <Box my={4} >\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n                    RA Analyze Stats\n                </Typography>\n\n                <Pagination count={numPages} page={page} shape=\"rounded\" onChange={handleChange} />\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <Graph commits={commits} />\n                    <MainUnit stats={commits} />\n                </Container>\n            </Box>\n        </Container>\n    );\n}\n","import red from '@material-ui/core/colors/red';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}